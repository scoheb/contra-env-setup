---
- set_fact:
    params: []

# Check for failed apps and cleanup
- name: Check for any failed apps on the cluster
  shell: "{{ oc_bin }} get all | egrep 'Failed|Error' | egrep 'builds' | awk '{print $1}' | awk -F'/' '{print $2}' | sed 's/-[0-9+]//g' | head -1"
  register: oc_check_app_status
  ignore_errors: yes

- name: Cleanup any failed dc, bc, routes, svc, and is for {{ oc_check_app_status.stdout }} on the cluster
  shell: "{{ oc_bin }} get all | grep '{{ oc_check_app_status.stdout }}' | awk '{print $1}' | egrep -v 'builds|po' | xargs -i {{ oc_bin }} delete {}"
  ignore_errors: yes
  when: oc_check_app_status.stdout != ""

- name: Cleanup any serviceaccounts, pvc, and rolebindings for an app if it exists on the cluster
  shell: "{{ oc_bin }} get {{ item }} | grep '{{ oc_check_app_status.stdout }}' | awk '{print $1}' | xargs -i {{ oc_bin }} delete {{ item }}/{}"
  ignore_errors: yes
  with_items:
    - serviceaccounts
    - pvc
    - rolebindings
  when: oc_check_app_status.stdout != ""

- name: "{{ container_config_name }} :: Get template name from the yaml file"
  shell: "{{ oc_bin }} process -f {{ template_name }} | jq '.items[1].metadata.labels.template' | sed 's/\"//g'"
  register: "template_name_file"

- debug:
    msg: "{{ container_config_name }} :: Template Name in file: {{ template_name_file.stdout }}"

- name: "{{ container_config_name }} :: Get template name from querying the cluster"
  shell: "{{ oc_bin }} get templates | awk '{print $1}' | egrep '^{{ template_name_file.stdout }}$'"
  register: "template_name_check"
  ignore_errors: yes

- debug:
    msg: "{{ container_config_name }} :: Template Name from querying the cluster: {{ template_name_check.stdout }}"

- name: "{{ container_config_name }} :: Updating buildconfig {{ template_name }}"
  shell: "{{ oc_bin }} replace -f {{ template_name }}"
  when: template_name_check.stdout != ""

- name: "{{ container_config_name }} :: Creating buildconfig {{ template_name }}"
  shell: "{{ oc_bin }} create -f {{ template_name }}"
  when: template_name_check.stdout == ""

# imagestreams
- name: "{{ container_config_name }} :: Get imagestream name from the yaml file"
  shell: "{{ oc_bin }} process -f {{ template_name }} | jq '.items[0].metadata.name' | sed 's/\"//g'"
  register: "image_stream_name_file"

- name: "{{ container_config_name }} :: Get imagestream from querying the cluster"
  shell: "{{ oc_bin }} get imagestream | awk '{print $1}' | egrep '^{{ image_stream_name_file.stdout }}$'"
  ignore_errors: yes
  register: "image_stream_name_check"

- debug:
    msg: "{{ container_config_name }} :: Imagestream Name from querying the cluster: {{ image_stream_name_check.stdout }}"

- debug:
    msg: "{{ container_config_name }} :: Imagestream {{ image_stream_name_check.stdout }} already exists"
  when: image_stream_name_check.stdout != ""

# buildconfigs
- name: "{{ container_config_name }} :: Get buildconfig name from the yaml file"
  shell: "{{ oc_bin }} process -f {{ template_name }} | jq '.items[1].metadata.name' | sed 's/\"//g'"
  register: "build_config_name_file"

- name: "{{ container_config_name }} :: Get buildconfig from querying the cluster"
  shell: "{{ oc_bin }} get buildconfig | awk '{print $1}' | egrep '^{{ build_config_name_file.stdout }}$'"
  ignore_errors: yes
  register: "build_config_name_check"

- debug:
    msg: "{{ container_config_name }} :: Buildconfig Name from querying the cluster: {{ build_config_name_check.stdout }}"

- debug:
    msg: "{{ container_config_name }} :: Buildconfig {{ build_config_name_check.stdout }} already exists"
  when: build_config_name_check.stdout != ""

- name: "{{ container_config_name }} :: Check if the template being loaded contains the parameter..."
  shell: "{{ oc_bin }} describe template {{ template_name_file.stdout }} | grep {{ item.key }}"
  register: check_temp_params
  with_items: "{{ PARAMS }}"
  ignore_errors: yes

- set_fact:
    params: "{{ params | default([]) }} + [ '-p {{ item.item.key }}={{ item.item.val }}' ]"
  when: (item.stdout != "" and item.item.val != "")
  with_items: "{{ check_temp_params.results }}"

- set_fact:
    build_success: false

- include_tasks: build_new_app.yml
  with_items:
    - 1
    - 2
    - 3
  when: build_success|bool == false

- name: "{{ container_config_name }} :: Imagestream and buildconfig do not exist. Creating..."
  shell: "{{ oc_bin }} new-app {{ template_name_file.stdout }} {{ params | join(' ') }}"
  when: image_stream_name_check.stdout == "" and build_config_name_check.stdout == "" and build_success|bool == false

# Wait s2i container template to start building :: FINAL ATTEMPT
- name: "{{ container_config_name }} :: Wait for {{  build_config_name_file.stdout }} to be queued :: FINAL ATTEMPT"
  shell: "{{ oc_bin }} get builds | grep '{{  build_config_name_file.stdout }}'"
  register: oc_build_result
  until: oc_build_result.stdout.find(" Pending ") == -1
  retries: 6
  delay: 10
  ignore_errors: yes
  when: build_success|bool == false

# Wait s2i container template to be finished building :: FINAL ATTEMPT
- name: "{{ container_config_name }} :: Wait for {{  build_config_name_file.stdout }} to be built and marked with latest tag :: FINAL ATTEMPT"
  shell: "{{ oc_bin }} get builds | grep '{{  build_config_name_file.stdout }}'"
  register: oc_build_result
  until: (oc_build_result.stdout.find(" Running ") == -1 or oc_build_result.stdout.find(" Failed ") != -1)
  retries: 300
  delay: 10
  when: build_success|bool == false

- name: Fail if build failed
  fail:
    msg: "Build failed for {{  build_config_name_file.stdout }}"
  when: build_success|bool == false

# Check for failed apps and cleanup
- name: Check for any failed app on the cluster
  shell: "{{ oc_bin }} get all | egrep 'Failed|Error' | egrep 'builds' | awk '{print $1}' | awk -F'/' '{print $2}' | sed 's/-[0-9+]//g' | head -1"
  register: oc_check_app_status
  ignore_errors: yes
  when: build_success|bool == false

- name: Cleanup any failed dc, bc, routes, svc, and is for {{ oc_check_app_status.stdout }} on the cluster
  shell: "{{ oc_bin }} get all | grep '{{ oc_check_app_status.stdout }}' | awk '{print $1}' | egrep -v 'builds|po' | xargs -i {{ oc_bin }} delete {}"
  ignore_errors: yes
  when: (build_success|bool == false and oc_check_app_status.stdout != "")

- name: Cleanup any serviceaccounts, pvc, and rolebindings for an app if it exists on the cluster
  shell: "{{ oc_bin }} get {{ item }} | grep '{{ oc_check_app_status.stdout }}' | awk '{print $1}' | xargs -i {{ oc_bin }} delete {{ item }}/{}"
  ignore_errors: yes
  with_items:
    - serviceaccounts
    - pvc
    - rolebindings
  when: (build_success|bool == false and oc_check_app_status.stdout != "")

# If oc_build result is defined publish the outcome
- debug:
    msg: "End result of building the container image :: {{ oc_build_result.stdout }}"
  when: oc_build_result.stdout is defined

# Setup tag if container image build successful
- name: Modify tags on images
  shell: "{{ oc_bin }} get imagestream | awk '{print $2}' | grep -v DOCKER | sed 's/.*5000\\///g' | grep '{{ build_config_name_file.stdout }}' | xargs -i {{ oc_bin }} tag {}:latest {}:{{ tag }}"
  when: modify_tags|bool == true and build_success|bool == true
